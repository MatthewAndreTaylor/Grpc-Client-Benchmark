// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: image_service.proto
// Protobuf C++ Version: 5.28.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_image_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_image_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_image_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_image_5fservice_2eproto;
namespace image_service {
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ListImagesRequest;
struct ListImagesRequestDefaultTypeInternal;
extern ListImagesRequestDefaultTypeInternal _ListImagesRequest_default_instance_;
class ListImagesResponse;
struct ListImagesResponseDefaultTypeInternal;
extern ListImagesResponseDefaultTypeInternal _ListImagesResponse_default_instance_;
class StreamImagesRequest;
struct StreamImagesRequestDefaultTypeInternal;
extern StreamImagesRequestDefaultTypeInternal _StreamImagesRequest_default_instance_;
class StreamImagesResponse;
struct StreamImagesResponseDefaultTypeInternal;
extern StreamImagesResponseDefaultTypeInternal _StreamImagesResponse_default_instance_;
}  // namespace image_service
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace image_service {

// ===================================================================


// -------------------------------------------------------------------

class StreamImagesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:image_service.StreamImagesRequest) */ {
 public:
  inline StreamImagesRequest() : StreamImagesRequest(nullptr) {}
  ~StreamImagesRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamImagesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamImagesRequest(const StreamImagesRequest& from) : StreamImagesRequest(nullptr, from) {}
  inline StreamImagesRequest(StreamImagesRequest&& from) noexcept
      : StreamImagesRequest(nullptr, std::move(from)) {}
  inline StreamImagesRequest& operator=(const StreamImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamImagesRequest& operator=(StreamImagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamImagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamImagesRequest* internal_default_instance() {
    return reinterpret_cast<const StreamImagesRequest*>(
        &_StreamImagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(StreamImagesRequest& a, StreamImagesRequest& b) { a.Swap(&b); }
  inline void Swap(StreamImagesRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamImagesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamImagesRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StreamImagesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamImagesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamImagesRequest& from) { StreamImagesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamImagesRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "image_service.StreamImagesRequest"; }

 protected:
  explicit StreamImagesRequest(::google::protobuf::Arena* arena);
  StreamImagesRequest(::google::protobuf::Arena* arena, const StreamImagesRequest& from);
  StreamImagesRequest(::google::protobuf::Arena* arena, StreamImagesRequest&& from) noexcept
      : StreamImagesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImageNamesFieldNumber = 1,
  };
  // repeated string image_names = 1;
  int image_names_size() const;
  private:
  int _internal_image_names_size() const;

  public:
  void clear_image_names() ;
  const std::string& image_names(int index) const;
  std::string* mutable_image_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_names(int index, Arg_&& value, Args_... args);
  std::string* add_image_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_image_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& image_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_image_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_image_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_image_names();

  public:
  // @@protoc_insertion_point(class_scope:image_service.StreamImagesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      53, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StreamImagesRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamImagesRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> image_names_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListImagesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:image_service.ListImagesResponse) */ {
 public:
  inline ListImagesResponse() : ListImagesResponse(nullptr) {}
  ~ListImagesResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListImagesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListImagesResponse(const ListImagesResponse& from) : ListImagesResponse(nullptr, from) {}
  inline ListImagesResponse(ListImagesResponse&& from) noexcept
      : ListImagesResponse(nullptr, std::move(from)) {}
  inline ListImagesResponse& operator=(const ListImagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImagesResponse& operator=(ListImagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListImagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListImagesResponse* internal_default_instance() {
    return reinterpret_cast<const ListImagesResponse*>(
        &_ListImagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ListImagesResponse& a, ListImagesResponse& b) { a.Swap(&b); }
  inline void Swap(ListImagesResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImagesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListImagesResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ListImagesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListImagesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListImagesResponse& from) { ListImagesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListImagesResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "image_service.ListImagesResponse"; }

 protected:
  explicit ListImagesResponse(::google::protobuf::Arena* arena);
  ListImagesResponse(::google::protobuf::Arena* arena, const ListImagesResponse& from);
  ListImagesResponse(::google::protobuf::Arena* arena, ListImagesResponse&& from) noexcept
      : ListImagesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImageNamesFieldNumber = 1,
  };
  // repeated string image_names = 1;
  int image_names_size() const;
  private:
  int _internal_image_names_size() const;

  public:
  void clear_image_names() ;
  const std::string& image_names(int index) const;
  std::string* mutable_image_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_names(int index, Arg_&& value, Args_... args);
  std::string* add_image_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_image_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& image_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_image_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_image_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_image_names();

  public:
  // @@protoc_insertion_point(class_scope:image_service.ListImagesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ListImagesResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListImagesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> image_names_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListImagesRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:image_service.ListImagesRequest) */ {
 public:
  inline ListImagesRequest() : ListImagesRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListImagesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListImagesRequest(const ListImagesRequest& from) : ListImagesRequest(nullptr, from) {}
  inline ListImagesRequest(ListImagesRequest&& from) noexcept
      : ListImagesRequest(nullptr, std::move(from)) {}
  inline ListImagesRequest& operator=(const ListImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImagesRequest& operator=(ListImagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListImagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListImagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListImagesRequest*>(
        &_ListImagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ListImagesRequest& a, ListImagesRequest& b) { a.Swap(&b); }
  inline void Swap(ListImagesRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImagesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListImagesRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ListImagesRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListImagesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListImagesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "image_service.ListImagesRequest"; }

 protected:
  explicit ListImagesRequest(::google::protobuf::Arena* arena);
  ListImagesRequest(::google::protobuf::Arena* arena, const ListImagesRequest& from);
  ListImagesRequest(::google::protobuf::Arena* arena, ListImagesRequest&& from) noexcept
      : ListImagesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:image_service.ListImagesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ListImagesRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListImagesRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_image_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Image final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:image_service.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Image(
      ::google::protobuf::internal::ConstantInitialized);

  inline Image(const Image& from) : Image(nullptr, from) {}
  inline Image(Image&& from) noexcept
      : Image(nullptr, std::move(from)) {}
  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
        &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Image& a, Image& b) { a.Swap(&b); }
  inline void Swap(Image* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Image>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Image& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Image& from) { Image::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Image* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "image_service.Image"; }

 protected:
  explicit Image(::google::protobuf::Arena* arena);
  Image(::google::protobuf::Arena* arena, const Image& from);
  Image(::google::protobuf::Arena* arena, Image&& from) noexcept
      : Image(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
    kFormatFieldNumber = 3,
    kSizeInBytesFieldNumber = 4,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string format = 3;
  void clear_format() ;
  const std::string& format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_format(Arg_&& arg, Args_... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* value);

  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(
      const std::string& value);
  std::string* _internal_mutable_format();

  public:
  // int32 size_in_bytes = 4;
  void clear_size_in_bytes() ;
  ::int32_t size_in_bytes() const;
  void set_size_in_bytes(::int32_t value);

  private:
  ::int32_t _internal_size_in_bytes() const;
  void _internal_set_size_in_bytes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:image_service.Image)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      38, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Image_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Image& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr format_;
    ::int32_t size_in_bytes_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StreamImagesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:image_service.StreamImagesResponse) */ {
 public:
  inline StreamImagesResponse() : StreamImagesResponse(nullptr) {}
  ~StreamImagesResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamImagesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamImagesResponse(const StreamImagesResponse& from) : StreamImagesResponse(nullptr, from) {}
  inline StreamImagesResponse(StreamImagesResponse&& from) noexcept
      : StreamImagesResponse(nullptr, std::move(from)) {}
  inline StreamImagesResponse& operator=(const StreamImagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamImagesResponse& operator=(StreamImagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamImagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamImagesResponse* internal_default_instance() {
    return reinterpret_cast<const StreamImagesResponse*>(
        &_StreamImagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(StreamImagesResponse& a, StreamImagesResponse& b) { a.Swap(&b); }
  inline void Swap(StreamImagesResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamImagesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamImagesResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StreamImagesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamImagesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamImagesResponse& from) { StreamImagesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamImagesResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "image_service.StreamImagesResponse"; }

 protected:
  explicit StreamImagesResponse(::google::protobuf::Arena* arena);
  StreamImagesResponse(::google::protobuf::Arena* arena, const StreamImagesResponse& from);
  StreamImagesResponse(::google::protobuf::Arena* arena, StreamImagesResponse&& from) noexcept
      : StreamImagesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImageFieldNumber = 1,
  };
  // .image_service.Image image = 1;
  bool has_image() const;
  void clear_image() ;
  const ::image_service::Image& image() const;
  PROTOBUF_NODISCARD ::image_service::Image* release_image();
  ::image_service::Image* mutable_image();
  void set_allocated_image(::image_service::Image* value);
  void unsafe_arena_set_allocated_image(::image_service::Image* value);
  ::image_service::Image* unsafe_arena_release_image();

  private:
  const ::image_service::Image& _internal_image() const;
  ::image_service::Image* _internal_mutable_image();

  public:
  // @@protoc_insertion_point(class_scope:image_service.StreamImagesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StreamImagesResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamImagesResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::image_service::Image* image_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Image

// string name = 1;
inline void Image::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Image::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image_service.Image.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Image::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:image_service.Image.name)
}
inline std::string* Image::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:image_service.Image.name)
  return _s;
}
inline const std::string& Image::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Image::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Image::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Image::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:image_service.Image.name)
  return _impl_.name_.Release();
}
inline void Image::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image_service.Image.name)
}

// bytes content = 2;
inline void Image::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Image::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image_service.Image.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Image::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:image_service.Image.content)
}
inline std::string* Image::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:image_service.Image.content)
  return _s;
}
inline const std::string& Image::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void Image::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* Image::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* Image::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:image_service.Image.content)
  return _impl_.content_.Release();
}
inline void Image::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image_service.Image.content)
}

// string format = 3;
inline void Image::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_.ClearToEmpty();
}
inline const std::string& Image::format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image_service.Image.format)
  return _internal_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Image::set_format(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:image_service.Image.format)
}
inline std::string* Image::mutable_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:image_service.Image.format)
  return _s;
}
inline const std::string& Image::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_.Get();
}
inline void Image::_internal_set_format(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_.Set(value, GetArena());
}
inline std::string* Image::_internal_mutable_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.format_.Mutable( GetArena());
}
inline std::string* Image::release_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:image_service.Image.format)
  return _impl_.format_.Release();
}
inline void Image::set_allocated_format(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.format_.IsDefault()) {
          _impl_.format_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image_service.Image.format)
}

// int32 size_in_bytes = 4;
inline void Image::clear_size_in_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_in_bytes_ = 0;
}
inline ::int32_t Image::size_in_bytes() const {
  // @@protoc_insertion_point(field_get:image_service.Image.size_in_bytes)
  return _internal_size_in_bytes();
}
inline void Image::set_size_in_bytes(::int32_t value) {
  _internal_set_size_in_bytes(value);
  // @@protoc_insertion_point(field_set:image_service.Image.size_in_bytes)
}
inline ::int32_t Image::_internal_size_in_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_in_bytes_;
}
inline void Image::_internal_set_size_in_bytes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_in_bytes_ = value;
}

// -------------------------------------------------------------------

// ListImagesRequest

// -------------------------------------------------------------------

// ListImagesResponse

// repeated string image_names = 1;
inline int ListImagesResponse::_internal_image_names_size() const {
  return _internal_image_names().size();
}
inline int ListImagesResponse::image_names_size() const {
  return _internal_image_names_size();
}
inline void ListImagesResponse::clear_image_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_names_.Clear();
}
inline std::string* ListImagesResponse::add_image_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_image_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:image_service.ListImagesResponse.image_names)
  return _s;
}
inline const std::string& ListImagesResponse::image_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image_service.ListImagesResponse.image_names)
  return _internal_image_names().Get(index);
}
inline std::string* ListImagesResponse::mutable_image_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:image_service.ListImagesResponse.image_names)
  return _internal_mutable_image_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ListImagesResponse::set_image_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_image_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:image_service.ListImagesResponse.image_names)
}
template <typename Arg_, typename... Args_>
inline void ListImagesResponse::add_image_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_image_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:image_service.ListImagesResponse.image_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ListImagesResponse::image_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:image_service.ListImagesResponse.image_names)
  return _internal_image_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ListImagesResponse::mutable_image_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:image_service.ListImagesResponse.image_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_image_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ListImagesResponse::_internal_image_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.image_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ListImagesResponse::_internal_mutable_image_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.image_names_;
}

// -------------------------------------------------------------------

// StreamImagesRequest

// repeated string image_names = 1;
inline int StreamImagesRequest::_internal_image_names_size() const {
  return _internal_image_names().size();
}
inline int StreamImagesRequest::image_names_size() const {
  return _internal_image_names_size();
}
inline void StreamImagesRequest::clear_image_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_names_.Clear();
}
inline std::string* StreamImagesRequest::add_image_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_image_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:image_service.StreamImagesRequest.image_names)
  return _s;
}
inline const std::string& StreamImagesRequest::image_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image_service.StreamImagesRequest.image_names)
  return _internal_image_names().Get(index);
}
inline std::string* StreamImagesRequest::mutable_image_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:image_service.StreamImagesRequest.image_names)
  return _internal_mutable_image_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void StreamImagesRequest::set_image_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_image_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:image_service.StreamImagesRequest.image_names)
}
template <typename Arg_, typename... Args_>
inline void StreamImagesRequest::add_image_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_image_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:image_service.StreamImagesRequest.image_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
StreamImagesRequest::image_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:image_service.StreamImagesRequest.image_names)
  return _internal_image_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
StreamImagesRequest::mutable_image_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:image_service.StreamImagesRequest.image_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_image_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
StreamImagesRequest::_internal_image_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.image_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
StreamImagesRequest::_internal_mutable_image_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.image_names_;
}

// -------------------------------------------------------------------

// StreamImagesResponse

// .image_service.Image image = 1;
inline bool StreamImagesResponse::has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline void StreamImagesResponse::clear_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::image_service::Image& StreamImagesResponse::_internal_image() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::image_service::Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::image_service::Image&>(::image_service::_Image_default_instance_);
}
inline const ::image_service::Image& StreamImagesResponse::image() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image_service.StreamImagesResponse.image)
  return _internal_image();
}
inline void StreamImagesResponse::unsafe_arena_set_allocated_image(::image_service::Image* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = reinterpret_cast<::image_service::Image*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_service.StreamImagesResponse.image)
}
inline ::image_service::Image* StreamImagesResponse::release_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::image_service::Image* released = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::image_service::Image* StreamImagesResponse::unsafe_arena_release_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:image_service.StreamImagesResponse.image)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::image_service::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::image_service::Image* StreamImagesResponse::_internal_mutable_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.image_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::image_service::Image>(GetArena());
    _impl_.image_ = reinterpret_cast<::image_service::Image*>(p);
  }
  return _impl_.image_;
}
inline ::image_service::Image* StreamImagesResponse::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::image_service::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:image_service.StreamImagesResponse.image)
  return _msg;
}
inline void StreamImagesResponse::set_allocated_image(::image_service::Image* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.image_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.image_ = reinterpret_cast<::image_service::Image*>(value);
  // @@protoc_insertion_point(field_set_allocated:image_service.StreamImagesResponse.image)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace image_service


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_image_5fservice_2eproto_2epb_2eh
