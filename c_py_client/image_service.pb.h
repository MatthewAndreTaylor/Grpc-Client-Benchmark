// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_image_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_image_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_image_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_5fservice_2eproto;
namespace image_service {
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ListImagesRequest;
struct ListImagesRequestDefaultTypeInternal;
extern ListImagesRequestDefaultTypeInternal _ListImagesRequest_default_instance_;
class ListImagesResponse;
struct ListImagesResponseDefaultTypeInternal;
extern ListImagesResponseDefaultTypeInternal _ListImagesResponse_default_instance_;
class StreamImagesRequest;
struct StreamImagesRequestDefaultTypeInternal;
extern StreamImagesRequestDefaultTypeInternal _StreamImagesRequest_default_instance_;
class StreamImagesResponse;
struct StreamImagesResponseDefaultTypeInternal;
extern StreamImagesResponseDefaultTypeInternal _StreamImagesResponse_default_instance_;
}  // namespace image_service
PROTOBUF_NAMESPACE_OPEN
template<> ::image_service::Image* Arena::CreateMaybeMessage<::image_service::Image>(Arena*);
template<> ::image_service::ListImagesRequest* Arena::CreateMaybeMessage<::image_service::ListImagesRequest>(Arena*);
template<> ::image_service::ListImagesResponse* Arena::CreateMaybeMessage<::image_service::ListImagesResponse>(Arena*);
template<> ::image_service::StreamImagesRequest* Arena::CreateMaybeMessage<::image_service::StreamImagesRequest>(Arena*);
template<> ::image_service::StreamImagesResponse* Arena::CreateMaybeMessage<::image_service::StreamImagesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace image_service {

// ===================================================================

class Image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:image_service.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  explicit PROTOBUF_CONSTEXPR Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Image& from) {
    Image::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "image_service.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
    kFormatFieldNumber = 3,
    kSizeInBytesFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string format = 3;
  void clear_format();
  const std::string& format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // int32 size_in_bytes = 4;
  void clear_size_in_bytes();
  int32_t size_in_bytes() const;
  void set_size_in_bytes(int32_t value);
  private:
  int32_t _internal_size_in_bytes() const;
  void _internal_set_size_in_bytes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:image_service.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
    int32_t size_in_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListImagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:image_service.ListImagesRequest) */ {
 public:
  inline ListImagesRequest() : ListImagesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ListImagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListImagesRequest(const ListImagesRequest& from);
  ListImagesRequest(ListImagesRequest&& from) noexcept
    : ListImagesRequest() {
    *this = ::std::move(from);
  }

  inline ListImagesRequest& operator=(const ListImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImagesRequest& operator=(ListImagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListImagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListImagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListImagesRequest*>(
               &_ListImagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListImagesRequest& a, ListImagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListImagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListImagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListImagesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListImagesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "image_service.ListImagesRequest";
  }
  protected:
  explicit ListImagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:image_service.ListImagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_image_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListImagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:image_service.ListImagesResponse) */ {
 public:
  inline ListImagesResponse() : ListImagesResponse(nullptr) {}
  ~ListImagesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListImagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListImagesResponse(const ListImagesResponse& from);
  ListImagesResponse(ListImagesResponse&& from) noexcept
    : ListImagesResponse() {
    *this = ::std::move(from);
  }

  inline ListImagesResponse& operator=(const ListImagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImagesResponse& operator=(ListImagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListImagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListImagesResponse* internal_default_instance() {
    return reinterpret_cast<const ListImagesResponse*>(
               &_ListImagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListImagesResponse& a, ListImagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListImagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListImagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListImagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListImagesResponse& from) {
    ListImagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "image_service.ListImagesResponse";
  }
  protected:
  explicit ListImagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageNamesFieldNumber = 1,
  };
  // repeated string image_names = 1;
  int image_names_size() const;
  private:
  int _internal_image_names_size() const;
  public:
  void clear_image_names();
  const std::string& image_names(int index) const;
  std::string* mutable_image_names(int index);
  void set_image_names(int index, const std::string& value);
  void set_image_names(int index, std::string&& value);
  void set_image_names(int index, const char* value);
  void set_image_names(int index, const char* value, size_t size);
  std::string* add_image_names();
  void add_image_names(const std::string& value);
  void add_image_names(std::string&& value);
  void add_image_names(const char* value);
  void add_image_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& image_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_image_names();
  private:
  const std::string& _internal_image_names(int index) const;
  std::string* _internal_add_image_names();
  public:

  // @@protoc_insertion_point(class_scope:image_service.ListImagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> image_names_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StreamImagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:image_service.StreamImagesRequest) */ {
 public:
  inline StreamImagesRequest() : StreamImagesRequest(nullptr) {}
  ~StreamImagesRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamImagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamImagesRequest(const StreamImagesRequest& from);
  StreamImagesRequest(StreamImagesRequest&& from) noexcept
    : StreamImagesRequest() {
    *this = ::std::move(from);
  }

  inline StreamImagesRequest& operator=(const StreamImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamImagesRequest& operator=(StreamImagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamImagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamImagesRequest* internal_default_instance() {
    return reinterpret_cast<const StreamImagesRequest*>(
               &_StreamImagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamImagesRequest& a, StreamImagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamImagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamImagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamImagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamImagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamImagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamImagesRequest& from) {
    StreamImagesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamImagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "image_service.StreamImagesRequest";
  }
  protected:
  explicit StreamImagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageNamesFieldNumber = 1,
  };
  // repeated string image_names = 1;
  int image_names_size() const;
  private:
  int _internal_image_names_size() const;
  public:
  void clear_image_names();
  const std::string& image_names(int index) const;
  std::string* mutable_image_names(int index);
  void set_image_names(int index, const std::string& value);
  void set_image_names(int index, std::string&& value);
  void set_image_names(int index, const char* value);
  void set_image_names(int index, const char* value, size_t size);
  std::string* add_image_names();
  void add_image_names(const std::string& value);
  void add_image_names(std::string&& value);
  void add_image_names(const char* value);
  void add_image_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& image_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_image_names();
  private:
  const std::string& _internal_image_names(int index) const;
  std::string* _internal_add_image_names();
  public:

  // @@protoc_insertion_point(class_scope:image_service.StreamImagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> image_names_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StreamImagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:image_service.StreamImagesResponse) */ {
 public:
  inline StreamImagesResponse() : StreamImagesResponse(nullptr) {}
  ~StreamImagesResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamImagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamImagesResponse(const StreamImagesResponse& from);
  StreamImagesResponse(StreamImagesResponse&& from) noexcept
    : StreamImagesResponse() {
    *this = ::std::move(from);
  }

  inline StreamImagesResponse& operator=(const StreamImagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamImagesResponse& operator=(StreamImagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamImagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamImagesResponse* internal_default_instance() {
    return reinterpret_cast<const StreamImagesResponse*>(
               &_StreamImagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamImagesResponse& a, StreamImagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamImagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamImagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamImagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamImagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamImagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamImagesResponse& from) {
    StreamImagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamImagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "image_service.StreamImagesResponse";
  }
  protected:
  explicit StreamImagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .image_service.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::image_service::Image& image() const;
  PROTOBUF_NODISCARD ::image_service::Image* release_image();
  ::image_service::Image* mutable_image();
  void set_allocated_image(::image_service::Image* image);
  private:
  const ::image_service::Image& _internal_image() const;
  ::image_service::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::image_service::Image* image);
  ::image_service::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:image_service.StreamImagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::image_service::Image* image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// string name = 1;
inline void Image::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Image::name() const {
  // @@protoc_insertion_point(field_get:image_service.Image.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:image_service.Image.name)
}
inline std::string* Image::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:image_service.Image.name)
  return _s;
}
inline const std::string& Image::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Image::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_name() {
  // @@protoc_insertion_point(field_release:image_service.Image.name)
  return _impl_.name_.Release();
}
inline void Image::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image_service.Image.name)
}

// bytes content = 2;
inline void Image::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Image::content() const {
  // @@protoc_insertion_point(field_get:image_service.Image.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:image_service.Image.content)
}
inline std::string* Image::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:image_service.Image.content)
  return _s;
}
inline const std::string& Image::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Image::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_content() {
  // @@protoc_insertion_point(field_release:image_service.Image.content)
  return _impl_.content_.Release();
}
inline void Image::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image_service.Image.content)
}

// string format = 3;
inline void Image::clear_format() {
  _impl_.format_.ClearToEmpty();
}
inline const std::string& Image::format() const {
  // @@protoc_insertion_point(field_get:image_service.Image.format)
  return _internal_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_format(ArgT0&& arg0, ArgT... args) {
 
 _impl_.format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:image_service.Image.format)
}
inline std::string* Image::mutable_format() {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:image_service.Image.format)
  return _s;
}
inline const std::string& Image::_internal_format() const {
  return _impl_.format_.Get();
}
inline void Image::_internal_set_format(const std::string& value) {
  
  _impl_.format_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_format() {
  
  return _impl_.format_.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_format() {
  // @@protoc_insertion_point(field_release:image_service.Image.format)
  return _impl_.format_.Release();
}
inline void Image::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  _impl_.format_.SetAllocated(format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.format_.IsDefault()) {
    _impl_.format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image_service.Image.format)
}

// int32 size_in_bytes = 4;
inline void Image::clear_size_in_bytes() {
  _impl_.size_in_bytes_ = 0;
}
inline int32_t Image::_internal_size_in_bytes() const {
  return _impl_.size_in_bytes_;
}
inline int32_t Image::size_in_bytes() const {
  // @@protoc_insertion_point(field_get:image_service.Image.size_in_bytes)
  return _internal_size_in_bytes();
}
inline void Image::_internal_set_size_in_bytes(int32_t value) {
  
  _impl_.size_in_bytes_ = value;
}
inline void Image::set_size_in_bytes(int32_t value) {
  _internal_set_size_in_bytes(value);
  // @@protoc_insertion_point(field_set:image_service.Image.size_in_bytes)
}

// -------------------------------------------------------------------

// ListImagesRequest

// -------------------------------------------------------------------

// ListImagesResponse

// repeated string image_names = 1;
inline int ListImagesResponse::_internal_image_names_size() const {
  return _impl_.image_names_.size();
}
inline int ListImagesResponse::image_names_size() const {
  return _internal_image_names_size();
}
inline void ListImagesResponse::clear_image_names() {
  _impl_.image_names_.Clear();
}
inline std::string* ListImagesResponse::add_image_names() {
  std::string* _s = _internal_add_image_names();
  // @@protoc_insertion_point(field_add_mutable:image_service.ListImagesResponse.image_names)
  return _s;
}
inline const std::string& ListImagesResponse::_internal_image_names(int index) const {
  return _impl_.image_names_.Get(index);
}
inline const std::string& ListImagesResponse::image_names(int index) const {
  // @@protoc_insertion_point(field_get:image_service.ListImagesResponse.image_names)
  return _internal_image_names(index);
}
inline std::string* ListImagesResponse::mutable_image_names(int index) {
  // @@protoc_insertion_point(field_mutable:image_service.ListImagesResponse.image_names)
  return _impl_.image_names_.Mutable(index);
}
inline void ListImagesResponse::set_image_names(int index, const std::string& value) {
  _impl_.image_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:image_service.ListImagesResponse.image_names)
}
inline void ListImagesResponse::set_image_names(int index, std::string&& value) {
  _impl_.image_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:image_service.ListImagesResponse.image_names)
}
inline void ListImagesResponse::set_image_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.image_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:image_service.ListImagesResponse.image_names)
}
inline void ListImagesResponse::set_image_names(int index, const char* value, size_t size) {
  _impl_.image_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:image_service.ListImagesResponse.image_names)
}
inline std::string* ListImagesResponse::_internal_add_image_names() {
  return _impl_.image_names_.Add();
}
inline void ListImagesResponse::add_image_names(const std::string& value) {
  _impl_.image_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:image_service.ListImagesResponse.image_names)
}
inline void ListImagesResponse::add_image_names(std::string&& value) {
  _impl_.image_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:image_service.ListImagesResponse.image_names)
}
inline void ListImagesResponse::add_image_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.image_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:image_service.ListImagesResponse.image_names)
}
inline void ListImagesResponse::add_image_names(const char* value, size_t size) {
  _impl_.image_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:image_service.ListImagesResponse.image_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListImagesResponse::image_names() const {
  // @@protoc_insertion_point(field_list:image_service.ListImagesResponse.image_names)
  return _impl_.image_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListImagesResponse::mutable_image_names() {
  // @@protoc_insertion_point(field_mutable_list:image_service.ListImagesResponse.image_names)
  return &_impl_.image_names_;
}

// -------------------------------------------------------------------

// StreamImagesRequest

// repeated string image_names = 1;
inline int StreamImagesRequest::_internal_image_names_size() const {
  return _impl_.image_names_.size();
}
inline int StreamImagesRequest::image_names_size() const {
  return _internal_image_names_size();
}
inline void StreamImagesRequest::clear_image_names() {
  _impl_.image_names_.Clear();
}
inline std::string* StreamImagesRequest::add_image_names() {
  std::string* _s = _internal_add_image_names();
  // @@protoc_insertion_point(field_add_mutable:image_service.StreamImagesRequest.image_names)
  return _s;
}
inline const std::string& StreamImagesRequest::_internal_image_names(int index) const {
  return _impl_.image_names_.Get(index);
}
inline const std::string& StreamImagesRequest::image_names(int index) const {
  // @@protoc_insertion_point(field_get:image_service.StreamImagesRequest.image_names)
  return _internal_image_names(index);
}
inline std::string* StreamImagesRequest::mutable_image_names(int index) {
  // @@protoc_insertion_point(field_mutable:image_service.StreamImagesRequest.image_names)
  return _impl_.image_names_.Mutable(index);
}
inline void StreamImagesRequest::set_image_names(int index, const std::string& value) {
  _impl_.image_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:image_service.StreamImagesRequest.image_names)
}
inline void StreamImagesRequest::set_image_names(int index, std::string&& value) {
  _impl_.image_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:image_service.StreamImagesRequest.image_names)
}
inline void StreamImagesRequest::set_image_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.image_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:image_service.StreamImagesRequest.image_names)
}
inline void StreamImagesRequest::set_image_names(int index, const char* value, size_t size) {
  _impl_.image_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:image_service.StreamImagesRequest.image_names)
}
inline std::string* StreamImagesRequest::_internal_add_image_names() {
  return _impl_.image_names_.Add();
}
inline void StreamImagesRequest::add_image_names(const std::string& value) {
  _impl_.image_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:image_service.StreamImagesRequest.image_names)
}
inline void StreamImagesRequest::add_image_names(std::string&& value) {
  _impl_.image_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:image_service.StreamImagesRequest.image_names)
}
inline void StreamImagesRequest::add_image_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.image_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:image_service.StreamImagesRequest.image_names)
}
inline void StreamImagesRequest::add_image_names(const char* value, size_t size) {
  _impl_.image_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:image_service.StreamImagesRequest.image_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamImagesRequest::image_names() const {
  // @@protoc_insertion_point(field_list:image_service.StreamImagesRequest.image_names)
  return _impl_.image_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamImagesRequest::mutable_image_names() {
  // @@protoc_insertion_point(field_mutable_list:image_service.StreamImagesRequest.image_names)
  return &_impl_.image_names_;
}

// -------------------------------------------------------------------

// StreamImagesResponse

// .image_service.Image image = 1;
inline bool StreamImagesResponse::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool StreamImagesResponse::has_image() const {
  return _internal_has_image();
}
inline void StreamImagesResponse::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
inline const ::image_service::Image& StreamImagesResponse::_internal_image() const {
  const ::image_service::Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::image_service::Image&>(
      ::image_service::_Image_default_instance_);
}
inline const ::image_service::Image& StreamImagesResponse::image() const {
  // @@protoc_insertion_point(field_get:image_service.StreamImagesResponse.image)
  return _internal_image();
}
inline void StreamImagesResponse::unsafe_arena_set_allocated_image(
    ::image_service::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_service.StreamImagesResponse.image)
}
inline ::image_service::Image* StreamImagesResponse::release_image() {
  
  ::image_service::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::image_service::Image* StreamImagesResponse::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:image_service.StreamImagesResponse.image)
  
  ::image_service::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::image_service::Image* StreamImagesResponse::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::image_service::Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::image_service::Image* StreamImagesResponse::mutable_image() {
  ::image_service::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:image_service.StreamImagesResponse.image)
  return _msg;
}
inline void StreamImagesResponse::set_allocated_image(::image_service::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:image_service.StreamImagesResponse.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace image_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_image_5fservice_2eproto
