# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: image_service.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import image_service_pb2


class ImageServiceBase(abc.ABC):

    @abc.abstractmethod
    async def ListImages(self, stream: 'grpclib.server.Stream[image_service_pb2.ListImagesRequest, image_service_pb2.ListImagesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def StreamImages(self, stream: 'grpclib.server.Stream[image_service_pb2.StreamImagesRequest, image_service_pb2.StreamImagesResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/image_service.ImageService/ListImages': grpclib.const.Handler(
                self.ListImages,
                grpclib.const.Cardinality.UNARY_UNARY,
                image_service_pb2.ListImagesRequest,
                image_service_pb2.ListImagesResponse,
            ),
            '/image_service.ImageService/StreamImages': grpclib.const.Handler(
                self.StreamImages,
                grpclib.const.Cardinality.UNARY_STREAM,
                image_service_pb2.StreamImagesRequest,
                image_service_pb2.StreamImagesResponse,
            ),
        }


class ImageServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListImages = grpclib.client.UnaryUnaryMethod(
            channel,
            '/image_service.ImageService/ListImages',
            image_service_pb2.ListImagesRequest,
            image_service_pb2.ListImagesResponse,
        )
        self.StreamImages = grpclib.client.UnaryStreamMethod(
            channel,
            '/image_service.ImageService/StreamImages',
            image_service_pb2.StreamImagesRequest,
            image_service_pb2.StreamImagesResponse,
        )
