// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_service.proto

#include "image_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace image_service {
PROTOBUF_CONSTEXPR Image::Image(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_in_bytes_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;
PROTOBUF_CONSTEXPR ListImagesRequest::ListImagesRequest(
    ::_pbi::ConstantInitialized) {}
struct ListImagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListImagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListImagesRequestDefaultTypeInternal() {}
  union {
    ListImagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListImagesRequestDefaultTypeInternal _ListImagesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListImagesResponse::ListImagesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_names_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListImagesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListImagesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListImagesResponseDefaultTypeInternal() {}
  union {
    ListImagesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListImagesResponseDefaultTypeInternal _ListImagesResponse_default_instance_;
PROTOBUF_CONSTEXPR StreamImagesRequest::StreamImagesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_names_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamImagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamImagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamImagesRequestDefaultTypeInternal() {}
  union {
    StreamImagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamImagesRequestDefaultTypeInternal _StreamImagesRequest_default_instance_;
PROTOBUF_CONSTEXPR StreamImagesResponse::StreamImagesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamImagesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamImagesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamImagesResponseDefaultTypeInternal() {}
  union {
    StreamImagesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamImagesResponseDefaultTypeInternal _StreamImagesResponse_default_instance_;
}  // namespace image_service
static ::_pb::Metadata file_level_metadata_image_5fservice_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_image_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_image_5fservice_2eproto = nullptr;

const uint32_t TableStruct_image_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::image_service::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::image_service::Image, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::image_service::Image, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::image_service::Image, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::image_service::Image, _impl_.size_in_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::image_service::ListImagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::image_service::ListImagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::image_service::ListImagesResponse, _impl_.image_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::image_service::StreamImagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::image_service::StreamImagesRequest, _impl_.image_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::image_service::StreamImagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::image_service::StreamImagesResponse, _impl_.image_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::image_service::Image)},
  { 10, -1, -1, sizeof(::image_service::ListImagesRequest)},
  { 16, -1, -1, sizeof(::image_service::ListImagesResponse)},
  { 23, -1, -1, sizeof(::image_service::StreamImagesRequest)},
  { 30, -1, -1, sizeof(::image_service::StreamImagesResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::image_service::_Image_default_instance_._instance,
  &::image_service::_ListImagesRequest_default_instance_._instance,
  &::image_service::_ListImagesResponse_default_instance_._instance,
  &::image_service::_StreamImagesRequest_default_instance_._instance,
  &::image_service::_StreamImagesResponse_default_instance_._instance,
};

const char descriptor_table_protodef_image_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023image_service.proto\022\rimage_service\"M\n\005"
  "Image\022\014\n\004name\030\001 \001(\t\022\017\n\007content\030\002 \001(\014\022\016\n\006"
  "format\030\003 \001(\t\022\025\n\rsize_in_bytes\030\004 \001(\005\"\023\n\021L"
  "istImagesRequest\")\n\022ListImagesResponse\022\023"
  "\n\013image_names\030\001 \003(\t\"*\n\023StreamImagesReque"
  "st\022\023\n\013image_names\030\001 \003(\t\";\n\024StreamImagesR"
  "esponse\022#\n\005image\030\001 \001(\0132\024.image_service.I"
  "mage2\274\001\n\014ImageService\022Q\n\nListImages\022 .im"
  "age_service.ListImagesRequest\032!.image_se"
  "rvice.ListImagesResponse\022Y\n\014StreamImages"
  "\022\".image_service.StreamImagesRequest\032#.i"
  "mage_service.StreamImagesResponse0\001b\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_image_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_image_5fservice_2eproto = {
    false, false, 483, descriptor_table_protodef_image_5fservice_2eproto,
    "image_service.proto",
    &descriptor_table_image_5fservice_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_image_5fservice_2eproto::offsets,
    file_level_metadata_image_5fservice_2eproto, file_level_enum_descriptors_image_5fservice_2eproto,
    file_level_service_descriptors_image_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_image_5fservice_2eproto_getter() {
  return &descriptor_table_image_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_image_5fservice_2eproto(&descriptor_table_image_5fservice_2eproto);
namespace image_service {

// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:image_service.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Image* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.size_in_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_in_bytes_ = from._impl_.size_in_bytes_;
  // @@protoc_insertion_point(copy_constructor:image_service.Image)
}

inline void Image::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.size_in_bytes_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:image_service.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.content_.Destroy();
  _impl_.format_.Destroy();
}

void Image::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:image_service.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.format_.ClearToEmpty();
  _impl_.size_in_bytes_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "image_service.Image.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "image_service.Image.format"));
        } else
          goto handle_unusual;
        continue;
      // int32 size_in_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.size_in_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_service.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "image_service.Image.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  // string format = 3;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "image_service.Image.format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_format(), target);
  }

  // int32 size_in_bytes = 4;
  if (this->_internal_size_in_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_size_in_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_service.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_service.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // string format = 3;
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // int32 size_in_bytes = 4;
  if (this->_internal_size_in_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size_in_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }


void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Image*>(&to_msg);
  auto& from = static_cast<const Image&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:image_service.Image)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_size_in_bytes() != 0) {
    _this->_internal_set_size_in_bytes(from._internal_size_in_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_service.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
  swap(_impl_.size_in_bytes_, other->_impl_.size_in_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fservice_2eproto_getter, &descriptor_table_image_5fservice_2eproto_once,
      file_level_metadata_image_5fservice_2eproto[0]);
}

// ===================================================================

class ListImagesRequest::_Internal {
 public:
};

ListImagesRequest::ListImagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:image_service.ListImagesRequest)
}
ListImagesRequest::ListImagesRequest(const ListImagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ListImagesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:image_service.ListImagesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListImagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListImagesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListImagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fservice_2eproto_getter, &descriptor_table_image_5fservice_2eproto_once,
      file_level_metadata_image_5fservice_2eproto[1]);
}

// ===================================================================

class ListImagesResponse::_Internal {
 public:
};

ListImagesResponse::ListImagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:image_service.ListImagesResponse)
}
ListImagesResponse::ListImagesResponse(const ListImagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListImagesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_names_){from._impl_.image_names_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:image_service.ListImagesResponse)
}

inline void ListImagesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_names_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListImagesResponse::~ListImagesResponse() {
  // @@protoc_insertion_point(destructor:image_service.ListImagesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListImagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_names_.~RepeatedPtrField();
}

void ListImagesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListImagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:image_service.ListImagesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListImagesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string image_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_image_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "image_service.ListImagesResponse.image_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListImagesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_service.ListImagesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string image_names = 1;
  for (int i = 0, n = this->_internal_image_names_size(); i < n; i++) {
    const auto& s = this->_internal_image_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "image_service.ListImagesResponse.image_names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_service.ListImagesResponse)
  return target;
}

size_t ListImagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_service.ListImagesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string image_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.image_names_.size());
  for (int i = 0, n = _impl_.image_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.image_names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListImagesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListImagesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListImagesResponse::GetClassData() const { return &_class_data_; }


void ListImagesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListImagesResponse*>(&to_msg);
  auto& from = static_cast<const ListImagesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:image_service.ListImagesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.image_names_.MergeFrom(from._impl_.image_names_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListImagesResponse::CopyFrom(const ListImagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_service.ListImagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListImagesResponse::IsInitialized() const {
  return true;
}

void ListImagesResponse::InternalSwap(ListImagesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.image_names_.InternalSwap(&other->_impl_.image_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListImagesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fservice_2eproto_getter, &descriptor_table_image_5fservice_2eproto_once,
      file_level_metadata_image_5fservice_2eproto[2]);
}

// ===================================================================

class StreamImagesRequest::_Internal {
 public:
};

StreamImagesRequest::StreamImagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:image_service.StreamImagesRequest)
}
StreamImagesRequest::StreamImagesRequest(const StreamImagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamImagesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_names_){from._impl_.image_names_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:image_service.StreamImagesRequest)
}

inline void StreamImagesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_names_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamImagesRequest::~StreamImagesRequest() {
  // @@protoc_insertion_point(destructor:image_service.StreamImagesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamImagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_names_.~RepeatedPtrField();
}

void StreamImagesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamImagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:image_service.StreamImagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamImagesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string image_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_image_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "image_service.StreamImagesRequest.image_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamImagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_service.StreamImagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string image_names = 1;
  for (int i = 0, n = this->_internal_image_names_size(); i < n; i++) {
    const auto& s = this->_internal_image_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "image_service.StreamImagesRequest.image_names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_service.StreamImagesRequest)
  return target;
}

size_t StreamImagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_service.StreamImagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string image_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.image_names_.size());
  for (int i = 0, n = _impl_.image_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.image_names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamImagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamImagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamImagesRequest::GetClassData() const { return &_class_data_; }


void StreamImagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamImagesRequest*>(&to_msg);
  auto& from = static_cast<const StreamImagesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:image_service.StreamImagesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.image_names_.MergeFrom(from._impl_.image_names_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamImagesRequest::CopyFrom(const StreamImagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_service.StreamImagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamImagesRequest::IsInitialized() const {
  return true;
}

void StreamImagesRequest::InternalSwap(StreamImagesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.image_names_.InternalSwap(&other->_impl_.image_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamImagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fservice_2eproto_getter, &descriptor_table_image_5fservice_2eproto_once,
      file_level_metadata_image_5fservice_2eproto[3]);
}

// ===================================================================

class StreamImagesResponse::_Internal {
 public:
  static const ::image_service::Image& image(const StreamImagesResponse* msg);
};

const ::image_service::Image&
StreamImagesResponse::_Internal::image(const StreamImagesResponse* msg) {
  return *msg->_impl_.image_;
}
StreamImagesResponse::StreamImagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:image_service.StreamImagesResponse)
}
StreamImagesResponse::StreamImagesResponse(const StreamImagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamImagesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::image_service::Image(*from._impl_.image_);
  }
  // @@protoc_insertion_point(copy_constructor:image_service.StreamImagesResponse)
}

inline void StreamImagesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamImagesResponse::~StreamImagesResponse() {
  // @@protoc_insertion_point(destructor:image_service.StreamImagesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamImagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_;
}

void StreamImagesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamImagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:image_service.StreamImagesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamImagesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .image_service.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamImagesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_service.StreamImagesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .image_service.Image image = 1;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_service.StreamImagesResponse)
  return target;
}

size_t StreamImagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_service.StreamImagesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .image_service.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamImagesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamImagesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamImagesResponse::GetClassData() const { return &_class_data_; }


void StreamImagesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamImagesResponse*>(&to_msg);
  auto& from = static_cast<const StreamImagesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:image_service.StreamImagesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::image_service::Image::MergeFrom(
        from._internal_image());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamImagesResponse::CopyFrom(const StreamImagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_service.StreamImagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamImagesResponse::IsInitialized() const {
  return true;
}

void StreamImagesResponse::InternalSwap(StreamImagesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.image_, other->_impl_.image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamImagesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fservice_2eproto_getter, &descriptor_table_image_5fservice_2eproto_once,
      file_level_metadata_image_5fservice_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace image_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::image_service::Image*
Arena::CreateMaybeMessage< ::image_service::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_service::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::image_service::ListImagesRequest*
Arena::CreateMaybeMessage< ::image_service::ListImagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_service::ListImagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::image_service::ListImagesResponse*
Arena::CreateMaybeMessage< ::image_service::ListImagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_service::ListImagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::image_service::StreamImagesRequest*
Arena::CreateMaybeMessage< ::image_service::StreamImagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_service::StreamImagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::image_service::StreamImagesResponse*
Arena::CreateMaybeMessage< ::image_service::StreamImagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_service::StreamImagesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
