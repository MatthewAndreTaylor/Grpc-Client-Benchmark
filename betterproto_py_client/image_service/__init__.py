# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: image_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Image(betterproto.Message):
    """Message representing an Image"""

    name: str = betterproto.string_field(1)
    content: bytes = betterproto.bytes_field(2)
    format: str = betterproto.string_field(3)
    size_in_bytes: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class ListImagesRequest(betterproto.Message):
    """Request message for ListImages RPC"""

    pass


@dataclass(eq=False, repr=False)
class ListImagesResponse(betterproto.Message):
    """Response message for ListImages RPC"""

    image_names: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class StreamImagesRequest(betterproto.Message):
    """Request message for StreamImages RPC"""

    image_names: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class StreamImagesResponse(betterproto.Message):
    """Stream response for StreamImages RPC"""

    image: "Image" = betterproto.message_field(1)


class ImageServiceStub(betterproto.ServiceStub):
    async def list_images(
        self,
        list_images_request: "ListImagesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListImagesResponse":
        return await self._unary_unary(
            "/image_service.ImageService/ListImages",
            list_images_request,
            ListImagesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stream_images(
        self,
        stream_images_request: "StreamImagesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["StreamImagesResponse"]:
        async for response in self._unary_stream(
            "/image_service.ImageService/StreamImages",
            stream_images_request,
            StreamImagesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class ImageServiceBase(ServiceBase):

    async def list_images(
        self, list_images_request: "ListImagesRequest"
    ) -> "ListImagesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stream_images(
        self, stream_images_request: "StreamImagesRequest"
    ) -> AsyncIterator["StreamImagesResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield StreamImagesResponse()

    async def __rpc_list_images(
        self, stream: "grpclib.server.Stream[ListImagesRequest, ListImagesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_images(request)
        await stream.send_message(response)

    async def __rpc_stream_images(
        self, stream: "grpclib.server.Stream[StreamImagesRequest, StreamImagesResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.stream_images,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/image_service.ImageService/ListImages": grpclib.const.Handler(
                self.__rpc_list_images,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListImagesRequest,
                ListImagesResponse,
            ),
            "/image_service.ImageService/StreamImages": grpclib.const.Handler(
                self.__rpc_stream_images,
                grpclib.const.Cardinality.UNARY_STREAM,
                StreamImagesRequest,
                StreamImagesResponse,
            ),
        }
